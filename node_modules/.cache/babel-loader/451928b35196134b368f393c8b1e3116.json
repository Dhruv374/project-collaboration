{"ast":null,"code":"import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\nimport actions from \"./actions\";\n\nconst rootReducer = (state = {\n  users: users,\n  tasks: tasks\n}, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case \"REMOVE_USER\":\n      console.log(action);\n      return {\n        users: state.users.filter(user => user.id != action.payload),\n        tasks: state.tasks.filter(task => task.assignee != action.payload)\n      };\n\n    case \"ADD_TASK\":\n      {\n        let user = state.users.find(user => user.id == action.payload.assignee);\n        user.tasks.push(action.payload.taskId);\n        return {\n          users: state.users,\n          tasks: [...state.tasks, action.payload]\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        let task = state.tasks.find(task => task.taskId == action.payload);\n        let user = state.users.find(user => user.id == task.assignee);\n        user.tasks = user.tasks.filter(taskId => taskId != action.payload);\n        return {\n          users: state.users,\n          tasks: state.tasks.filter(task => task.taskId != action.payload)\n        };\n      }\n\n    case \"UPDATE_USER\":\n      {\n        let ind = state.users.findIndex(user => user.id == action.payload.id);\n        return { ...state,\n          users: [...state.users.slice(0, ind), action.payload.user, ...state.users.slice(ind + 1)]\n        };\n      }\n\n    case \"UPDATE_TASK\":\n      {\n        let ind = state.tasks.findIndex(task => task.taskId == action.payload.taskId);\n\n        if (state.tasks[ind].assignee == action.payload.task.assignee) {\n          return { ...state,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        } else {\n          let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n          user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n          let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n          newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n          return {\n            users: state.users,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dhruvpatel/Desktop/poject-redux/src/store/reducers.js"],"names":["useState","act","Tasks","actions","rootReducer","state","users","tasks","action","type","payload","console","log","filter","user","id","task","assignee","find","push","taskId","ind","findIndex","slice","newUser","taskID"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\nimport actions from \"./actions\";\n\nconst rootReducer = (state = {users: users,tasks: tasks},action) => {\n    switch (action.type) {\n        case \"ADD_USER\" :\n            return (\n                {\n                    ...state,\n                    users: [...state.users,action.payload],\n                }\n            )\n\n        case \"REMOVE_USER\" :\n            console.log(action);\n            return (\n                {\n                    users: state.users.filter(user => user.id != action.payload),\n                    tasks: state.tasks.filter(task => task.assignee != action.payload),\n                }\n            )\n\n        case \"ADD_TASK\" : {\n            let user = state.users.find(user => user.id == action.payload.assignee);\n            user.tasks.push(action.payload.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: [...state.tasks,action.payload],\n                }\n            )\n        }\n\n        case \"REMOVE_TASK\" : {\n            let task = state.tasks.find(task => task.taskId == action.payload);\n            let user = state.users.find(user => user.id == task.assignee);\n            user.tasks = user.tasks.filter(taskId => taskId != action.payload);\n            return (\n                {\n                    users: state.users,\n                    tasks: state.tasks.filter(task => task.taskId != action.payload),\n                }\n            )\n        }\n\n        case \"UPDATE_USER\" : {\n            let ind = state.users.findIndex(user => user.id == action.payload.id)\n            return (\n                {\n                    ...state,\n                    users: [...state.users.slice(0,ind),action.payload.user,...state.users.slice(ind+1)],\n                }\n            )\n        }\n\n        case \"UPDATE_TASK\" : {\n            let ind = state.tasks.findIndex(task => task.taskId == action.payload.taskId);\n            if(state.tasks[ind].assignee == action.payload.task.assignee) {\n                return (\n                    {\n                        ...state,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n            else {\n                let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n                user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n                let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n                newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n                return (\n                    {\n                        users: state.users,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n        }\n\n        default : return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}