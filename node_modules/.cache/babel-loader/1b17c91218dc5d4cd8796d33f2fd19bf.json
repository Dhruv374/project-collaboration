{"ast":null,"code":"import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\n\nconst rootReducer = (state = {\n  users: [],\n  tasks: []\n}, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case \"REMOVE_USER\":\n      return {\n        users: state.users.filter(user => user.id != action.payload.id),\n        tasks: state.tasks.filter(task => task.assignee != action.payload.id)\n      };\n\n    case \"ADD_TASK\":\n      {\n        let user = state.users.find(user => user.id == action.payload.task.assignee);\n        user.tasks.push(action.payload.task.taskId);\n        return {\n          users: state.users,\n          tasks: [...state.tasks, action.payload.task]\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n        let user = state.users.find(user => user.id == task.assignee);\n        user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n        return {\n          users: state.users,\n          tasks: state.tasks.filter(task => task.taskId != action.payload.taskId)\n        };\n      }\n\n    case \"UPDATE_USER\":\n      {\n        let ind = state.users.findIndex(user => user.id == action.payload.id);\n        return { ...state,\n          users: [...state.users.slice(0, ind), action.payload.user, ...state.users.slice(ind + 1)]\n        };\n      }\n\n    case \"UPDATE_TASK\":\n      {\n        let ind = state.tasks.findIndex(task => task.taskID == action.payload.taskId);\n\n        if (state.task[ind].assignee == action.payload.task.assignee) {\n          return { ...state,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        } else {\n          let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n          user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n          let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n          newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n          return {\n            users: state.users,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dhruvpatel/Desktop/poject-redux/src/store/reducers.js"],"names":["useState","act","Tasks","rootReducer","state","users","tasks","action","type","payload","filter","user","id","task","assignee","find","push","taskId","ind","findIndex","slice","taskID","newUser"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\n\nconst rootReducer = (state = {users: [],tasks: []},action) => {\n    switch (action.type) {\n        case \"ADD_USER\" :\n            return (\n                {\n                    ...state,\n                    users: [...state.users,action.payload],\n                }\n            )\n\n        case \"REMOVE_USER\" :\n            return (\n                {\n                    users: state.users.filter(user => user.id != action.payload.id),\n                    tasks: state.tasks.filter(task => task.assignee != action.payload.id),\n                }\n            )\n\n        case \"ADD_TASK\" : {\n            let user = state.users.find(user => user.id == action.payload.task.assignee);\n            user.tasks.push(action.payload.task.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: [...state.tasks,action.payload.task],\n                }\n            )\n        }\n\n        case \"REMOVE_TASK\" : {\n            let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n            let user = state.users.find(user => user.id == task.assignee);\n            user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: state.tasks.filter(task => task.taskId != action.payload.taskId),\n                }\n            )\n        }\n\n        case \"UPDATE_USER\" : {\n            let ind = state.users.findIndex(user => user.id == action.payload.id)\n            return (\n                {\n                    ...state,\n                    users: [...state.users.slice(0,ind),action.payload.user,...state.users.slice(ind+1)],\n                }\n            )\n        }\n\n        case \"UPDATE_TASK\" : {\n            let ind = state.tasks.findIndex(task=> task.taskID == action.payload.taskId);\n            if(state.task[ind].assignee == action.payload.task.assignee) {\n                return (\n                    {\n                        ...state,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n            else {\n                let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n                user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n                let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n                newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n                return (\n                    {\n                        users: state.users,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n        }\n\n        default : return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}