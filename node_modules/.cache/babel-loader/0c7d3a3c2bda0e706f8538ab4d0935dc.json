{"ast":null,"code":"import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\nimport actions from \"./actions\";\n\nconst rootReducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case \"REMOVE_USER\":\n      console.log(action);\n      return {\n        users: state.users.filter(user => user.id != action.payload),\n        tasks: state.tasks.filter(task => task.assignee != action.payload)\n      };\n\n    case \"ADD_TASK\":\n      {\n        let user = state.users.find(user => user.id == action.payload.assignee);\n        user.tasks.push(action.payload.taskId);\n        return {\n          users: state.users,\n          tasks: [...state.tasks, action.payload]\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        let task = state.tasks.find(task => task.taskId == action.payload);\n        let user = state.users.find(user => user.id == task.assignee);\n        user.tasks = user.tasks.filter(taskId => taskId != action.payload);\n        return {\n          users: state.users,\n          tasks: state.tasks.filter(task => task.taskId != action.payload)\n        };\n      }\n\n    case \"UPDATE_USER\":\n      {\n        let ind = state.users.findIndex(user => user.id == action.payload.id);\n        return { ...state,\n          users: [...state.users.slice(0, ind), action.payload.user, ...state.users.slice(ind + 1)]\n        };\n      }\n\n    case \"UPDATE_TASK\":\n      {\n        let ind = state.tasks.findIndex(task => task.taskId == action.payload.taskId);\n\n        if (state.tasks[ind].assignee == action.payload.task.assignee) {\n          return { ...state,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        } else {\n          let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n          user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n          let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n          newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n          return {\n            users: state.users,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dhruvpatel/Desktop/poject-redux/src/store/reducers.js"],"names":["useState","act","Tasks","actions","rootReducer","state","action","type","users","payload","console","log","filter","user","id","tasks","task","assignee","find","push","taskId","ind","findIndex","slice","newUser","taskID"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\nimport actions from \"./actions\";\n\nconst rootReducer = (state = {},action) => {\n    switch (action.type) {\n        case \"ADD_USER\" :\n            return (\n                {\n                    ...state,\n                    users: [...state.users,action.payload],\n                }\n            )\n\n        case \"REMOVE_USER\" :\n            console.log(action);\n            return (\n                {\n                    users: state.users.filter(user => user.id != action.payload),\n                    tasks: state.tasks.filter(task => task.assignee != action.payload),\n                }\n            )\n\n        case \"ADD_TASK\" : {\n            let user = state.users.find(user => user.id == action.payload.assignee);\n            user.tasks.push(action.payload.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: [...state.tasks,action.payload],\n                }\n            )\n        }\n\n        case \"REMOVE_TASK\" : {\n            let task = state.tasks.find(task => task.taskId == action.payload);\n            let user = state.users.find(user => user.id == task.assignee);\n            user.tasks = user.tasks.filter(taskId => taskId != action.payload);\n            return (\n                {\n                    users: state.users,\n                    tasks: state.tasks.filter(task => task.taskId != action.payload),\n                }\n            )\n        }\n\n        case \"UPDATE_USER\" : {\n            let ind = state.users.findIndex(user => user.id == action.payload.id)\n            return (\n                {\n                    ...state,\n                    users: [...state.users.slice(0,ind),action.payload.user,...state.users.slice(ind+1)],\n                }\n            )\n        }\n\n        case \"UPDATE_TASK\" : {\n            let ind = state.tasks.findIndex(task => task.taskId == action.payload.taskId);\n            if(state.tasks[ind].assignee == action.payload.task.assignee) {\n                return (\n                    {\n                        ...state,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n            else {\n                let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n                user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n                let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n                newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n                return (\n                    {\n                        users: state.users,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n        }\n\n        default : return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}