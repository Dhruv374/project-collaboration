{"ast":null,"code":"import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\n\nconst rootReducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case \"REMOVE_USER\":\n      return {\n        users: state.users.filter(user => user.id != action.payload.id),\n        tasks: state.tasks.filter(task => task.assignee != action.payload.id)\n      };\n\n    case \"ADD_TASK\":\n      {\n        let user = state.users.find(user => user.id == action.payload.task.assignee);\n        user.tasks.push(action.payload.task.taskId);\n        return {\n          users: state.users,\n          tasks: [...state.tasks, action.payload.task]\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n        let user = state.users.find(user => user.id == task.assignee);\n        user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n        return {\n          users: state.users,\n          tasks: state.tasks.filter(task => task.taskId != action.payload.taskId)\n        };\n      }\n\n    case \"UPDATE_USER\":\n      {\n        let ind = state.users.findIndex(user => user.id == action.payload.id);\n        return { ...state,\n          users: [...state.users.slice(0, ind), action.payload.userx, ...state.users.slice(ind + 1)]\n        };\n      }\n\n    case \"UPDATE_TASK\":\n      {\n        let ind = state.tasks.findIndex(task => task.taskID == action.payload.taskId);\n\n        if (state.task[ind].assignee == action.payload.task.assignee) {\n          return { ...state,\n            tasks: [...state.tasks.slice(0, ind), task, ...state.tasks.slice(ind + 1)]\n          };\n        }\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dhruvpatel/Desktop/poject-redux/src/store/reducers.js"],"names":["useState","act","Tasks","rootReducer","state","action","type","users","payload","filter","user","id","tasks","task","assignee","find","push","taskId","ind","findIndex","slice","userx","taskID"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,aACI,EACI,GAAGF,KADP;AAEIG,QAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAgBF,MAAM,CAACG,OAAvB;AAFX,OADJ;;AAOJ,SAAK,aAAL;AACI,aACI;AACID,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYE,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWN,MAAM,CAACG,OAAP,CAAeG,EAArD,CADX;AAEIC,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYH,MAAZ,CAAmBI,IAAI,IAAIA,IAAI,CAACC,QAAL,IAAiBT,MAAM,CAACG,OAAP,CAAeG,EAA3D;AAFX,OADJ;;AAOJ,SAAK,UAAL;AAAkB;AACd,YAAID,IAAI,GAAGN,KAAK,CAACG,KAAN,CAAYQ,IAAZ,CAAiBL,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWN,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC,QAAxD,CAAX;AACAJ,QAAAA,IAAI,CAACE,KAAL,CAAWI,IAAX,CAAgBX,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBI,MAApC;AACA,eACI;AACIV,UAAAA,KAAK,EAAEH,KAAK,CAACG,KADjB;AAEIK,UAAAA,KAAK,EAAE,CAAC,GAAGR,KAAK,CAACQ,KAAV,EAAgBP,MAAM,CAACG,OAAP,CAAeK,IAA/B;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIA,IAAI,GAAGT,KAAK,CAACQ,KAAN,CAAYG,IAAZ,CAAiBF,IAAI,IAAIA,IAAI,CAACI,MAAL,IAAeZ,MAAM,CAACG,OAAP,CAAeS,MAAvD,CAAX;AACA,YAAIP,IAAI,GAAGN,KAAK,CAACG,KAAN,CAAYQ,IAAZ,CAAiBL,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWE,IAAI,CAACC,QAAzC,CAAX;AACAJ,QAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,CAAWH,MAAX,CAAkBQ,MAAM,IAAIA,MAAM,IAAIZ,MAAM,CAACG,OAAP,CAAeS,MAArD,CAAb;AACA,eACI;AACIV,UAAAA,KAAK,EAAEH,KAAK,CAACG,KADjB;AAEIK,UAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYH,MAAZ,CAAmBI,IAAI,IAAIA,IAAI,CAACI,MAAL,IAAeZ,MAAM,CAACG,OAAP,CAAeS,MAAzD;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIC,GAAG,GAAGd,KAAK,CAACG,KAAN,CAAYY,SAAZ,CAAsBT,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWN,MAAM,CAACG,OAAP,CAAeG,EAAxD,CAAV;AACA,eACI,EACI,GAAGP,KADP;AAEIG,UAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAN,CAAYa,KAAZ,CAAkB,CAAlB,EAAoBF,GAApB,CAAJ,EAA6Bb,MAAM,CAACG,OAAP,CAAea,KAA5C,EAAkD,GAAGjB,KAAK,CAACG,KAAN,CAAYa,KAAZ,CAAkBF,GAAG,GAAC,CAAtB,CAArD;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIA,GAAG,GAAGd,KAAK,CAACQ,KAAN,CAAYO,SAAZ,CAAsBN,IAAI,IAAGA,IAAI,CAACS,MAAL,IAAejB,MAAM,CAACG,OAAP,CAAeS,MAA3D,CAAV;;AACA,YAAGb,KAAK,CAACS,IAAN,CAAWK,GAAX,EAAgBJ,QAAhB,IAA4BT,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC,QAAnD,EAA6D;AACzD,iBACI,EACI,GAAGV,KADP;AAEIQ,YAAAA,KAAK,EAAE,CAAC,GAAGR,KAAK,CAACQ,KAAN,CAAYQ,KAAZ,CAAkB,CAAlB,EAAoBF,GAApB,CAAJ,EAA6BL,IAA7B,EAAkC,GAAGT,KAAK,CAACQ,KAAN,CAAYQ,KAAZ,CAAkBF,GAAG,GAAC,CAAtB,CAArC;AAFX,WADJ;AAMH;AACJ;AA5DL;AA8DH,CA/DD;;AAgEA,eAAef,WAAf","sourcesContent":["import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\n\nconst rootReducer = (state={},action) => {\n    switch (action.type) {\n        case \"ADD_USER\" :\n            return (\n                {\n                    ...state,\n                    users: [...state.users,action.payload],\n                }\n            )\n\n        case \"REMOVE_USER\" :\n            return (\n                {\n                    users: state.users.filter(user => user.id != action.payload.id),\n                    tasks: state.tasks.filter(task => task.assignee != action.payload.id),\n                }\n            )\n\n        case \"ADD_TASK\" : {\n            let user = state.users.find(user => user.id == action.payload.task.assignee);\n            user.tasks.push(action.payload.task.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: [...state.tasks,action.payload.task],\n                }\n            )\n        }\n\n        case \"REMOVE_TASK\" : {\n            let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n            let user = state.users.find(user => user.id == task.assignee);\n            user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: state.tasks.filter(task => task.taskId != action.payload.taskId),\n                }\n            )\n        }\n\n        case \"UPDATE_USER\" : {\n            let ind = state.users.findIndex(user => user.id == action.payload.id)\n            return (\n                {\n                    ...state,\n                    users: [...state.users.slice(0,ind),action.payload.userx,...state.users.slice(ind+1)],\n                }\n            )\n        }\n\n        case \"UPDATE_TASK\" : {\n            let ind = state.tasks.findIndex(task=> task.taskID == action.payload.taskId);\n            if(state.task[ind].assignee == action.payload.task.assignee) {\n                return (\n                    {\n                        ...state,\n                        tasks: [...state.tasks.slice(0,ind),task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n        }\n    }\n}\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}