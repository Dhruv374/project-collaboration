{"ast":null,"code":"import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\nlet users = [];\n\nif (users.length == 0) {\n  let newUser1 = {};\n  newUser1.id = 0;\n  newUser1.imageUrl = \"https://www.pavilionweb.com/wp-content/uploads/2017/03/man-300x300.png\";\n  newUser1.name = \"Dhruv Patel\";\n  newUser1.designation = \"project head\";\n  newUser1.location = \"Mumbai, India\";\n  newUser1.email = \"dhruv.patel@comapnay.com\";\n  newUser1.phone = \"917878345672\";\n  newUser1.tasks = [0];\n  users.push(newUser1);\n  let newUser2 = {};\n  newUser2.id = 1;\n  newUser2.imageUrl = \"assets/john-paul.jpeg\";\n  newUser2.name = \"John Paul\";\n  newUser2.designation = \"project manager\";\n  newUser2.location = \"New York, USA\";\n  newUser2.email = \"john.paul@comapnay.com\";\n  newUser2.phone = \"19998645408\";\n  newUser2.tasks = [1];\n  users.push(newUser2);\n  commitUsers(users);\n}\n\nconst rootReducer = (state = {\n  users: [],\n  tasks: []\n}, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return { ...state,\n        users: [...state.users, action.payload]\n      };\n\n    case \"REMOVE_USER\":\n      return {\n        users: state.users.filter(user => user.id != action.payload.id),\n        tasks: state.tasks.filter(task => task.assignee != action.payload.id)\n      };\n\n    case \"ADD_TASK\":\n      {\n        let user = state.users.find(user => user.id == action.payload.task.assignee);\n        user.tasks.push(action.payload.task.taskId);\n        return {\n          users: state.users,\n          tasks: [...state.tasks, action.payload.task]\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n        let user = state.users.find(user => user.id == task.assignee);\n        user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n        return {\n          users: state.users,\n          tasks: state.tasks.filter(task => task.taskId != action.payload.taskId)\n        };\n      }\n\n    case \"UPDATE_USER\":\n      {\n        let ind = state.users.findIndex(user => user.id == action.payload.id);\n        return { ...state,\n          users: [...state.users.slice(0, ind), action.payload.user, ...state.users.slice(ind + 1)]\n        };\n      }\n\n    case \"UPDATE_TASK\":\n      {\n        let ind = state.tasks.findIndex(task => task.taskID == action.payload.taskId);\n\n        if (state.task[ind].assignee == action.payload.task.assignee) {\n          return { ...state,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        } else {\n          let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n          user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n          let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n          newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n          return {\n            users: state.users,\n            tasks: [...state.tasks.slice(0, ind), action.payload.task, ...state.tasks.slice(ind + 1)]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/dhruvpatel/Desktop/poject-redux/src/store/reducers.js"],"names":["useState","act","Tasks","users","length","newUser1","id","imageUrl","name","designation","location","email","phone","tasks","push","newUser2","commitUsers","rootReducer","state","action","type","payload","filter","user","task","assignee","find","taskId","ind","findIndex","slice","taskID","newUser"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAIC,KAAK,GAAG,EAAZ;;AACA,IAAGA,KAAK,CAACC,MAAN,IAAgB,CAAnB,EACA;AACI,MAAIC,QAAQ,GAAG,EAAf;AACAA,EAAAA,QAAQ,CAACC,EAAT,GAAc,CAAd;AACAD,EAAAA,QAAQ,CAACE,QAAT,GAAoB,wEAApB;AACAF,EAAAA,QAAQ,CAACG,IAAT,GAAgB,aAAhB;AACAH,EAAAA,QAAQ,CAACI,WAAT,GAAuB,cAAvB;AACAJ,EAAAA,QAAQ,CAACK,QAAT,GAAoB,eAApB;AACAL,EAAAA,QAAQ,CAACM,KAAT,GAAiB,0BAAjB;AACAN,EAAAA,QAAQ,CAACO,KAAT,GAAiB,cAAjB;AACAP,EAAAA,QAAQ,CAACQ,KAAT,GAAiB,CAAC,CAAD,CAAjB;AACAV,EAAAA,KAAK,CAACW,IAAN,CAAWT,QAAX;AAEA,MAAIU,QAAQ,GAAG,EAAf;AACAA,EAAAA,QAAQ,CAACT,EAAT,GAAc,CAAd;AACAS,EAAAA,QAAQ,CAACR,QAAT,GAAoB,uBAApB;AACAQ,EAAAA,QAAQ,CAACP,IAAT,GAAgB,WAAhB;AACAO,EAAAA,QAAQ,CAACN,WAAT,GAAuB,iBAAvB;AACAM,EAAAA,QAAQ,CAACL,QAAT,GAAoB,eAApB;AACAK,EAAAA,QAAQ,CAACJ,KAAT,GAAiB,wBAAjB;AACAI,EAAAA,QAAQ,CAACH,KAAT,GAAiB,aAAjB;AACAG,EAAAA,QAAQ,CAACF,KAAT,GAAiB,CAAC,CAAD,CAAjB;AACAV,EAAAA,KAAK,CAACW,IAAN,CAAWC,QAAX;AAEAC,EAAAA,WAAW,CAACb,KAAD,CAAX;AACH;;AAED,MAAMc,WAAW,GAAG,CAACC,KAAK,GAAG;AAACf,EAAAA,KAAK,EAAE,EAAR;AAAWU,EAAAA,KAAK,EAAE;AAAlB,CAAT,EAA+BM,MAA/B,KAA0C;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,aACI,EACI,GAAGF,KADP;AAEIf,QAAAA,KAAK,EAAE,CAAC,GAAGe,KAAK,CAACf,KAAV,EAAgBgB,MAAM,CAACE,OAAvB;AAFX,OADJ;;AAOJ,SAAK,aAAL;AACI,aACI;AACIlB,QAAAA,KAAK,EAAEe,KAAK,CAACf,KAAN,CAAYmB,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWa,MAAM,CAACE,OAAP,CAAef,EAArD,CADX;AAEIO,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmBE,IAAI,IAAIA,IAAI,CAACC,QAAL,IAAiBN,MAAM,CAACE,OAAP,CAAef,EAA3D;AAFX,OADJ;;AAOJ,SAAK,UAAL;AAAkB;AACd,YAAIiB,IAAI,GAAGL,KAAK,CAACf,KAAN,CAAYuB,IAAZ,CAAiBH,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWa,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBC,QAAxD,CAAX;AACAF,QAAAA,IAAI,CAACV,KAAL,CAAWC,IAAX,CAAgBK,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBG,MAApC;AACA,eACI;AACIxB,UAAAA,KAAK,EAAEe,KAAK,CAACf,KADjB;AAEIU,UAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAgBM,MAAM,CAACE,OAAP,CAAeG,IAA/B;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIA,IAAI,GAAGN,KAAK,CAACL,KAAN,CAAYa,IAAZ,CAAiBF,IAAI,IAAIA,IAAI,CAACG,MAAL,IAAeR,MAAM,CAACE,OAAP,CAAeM,MAAvD,CAAX;AACA,YAAIJ,IAAI,GAAGL,KAAK,CAACf,KAAN,CAAYuB,IAAZ,CAAiBH,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWkB,IAAI,CAACC,QAAzC,CAAX;AACAF,QAAAA,IAAI,CAACV,KAAL,GAAaU,IAAI,CAACV,KAAL,CAAWS,MAAX,CAAkBK,MAAM,IAAIA,MAAM,IAAIR,MAAM,CAACE,OAAP,CAAeM,MAArD,CAAb;AACA,eACI;AACIxB,UAAAA,KAAK,EAAEe,KAAK,CAACf,KADjB;AAEIU,UAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmBE,IAAI,IAAIA,IAAI,CAACG,MAAL,IAAeR,MAAM,CAACE,OAAP,CAAeM,MAAzD;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIC,GAAG,GAAGV,KAAK,CAACf,KAAN,CAAY0B,SAAZ,CAAsBN,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWa,MAAM,CAACE,OAAP,CAAef,EAAxD,CAAV;AACA,eACI,EACI,GAAGY,KADP;AAEIf,UAAAA,KAAK,EAAE,CAAC,GAAGe,KAAK,CAACf,KAAN,CAAY2B,KAAZ,CAAkB,CAAlB,EAAoBF,GAApB,CAAJ,EAA6BT,MAAM,CAACE,OAAP,CAAeE,IAA5C,EAAiD,GAAGL,KAAK,CAACf,KAAN,CAAY2B,KAAZ,CAAkBF,GAAG,GAAC,CAAtB,CAApD;AAFX,SADJ;AAMH;;AAED,SAAK,aAAL;AAAqB;AACjB,YAAIA,GAAG,GAAGV,KAAK,CAACL,KAAN,CAAYgB,SAAZ,CAAsBL,IAAI,IAAGA,IAAI,CAACO,MAAL,IAAeZ,MAAM,CAACE,OAAP,CAAeM,MAA3D,CAAV;;AACA,YAAGT,KAAK,CAACM,IAAN,CAAWI,GAAX,EAAgBH,QAAhB,IAA4BN,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBC,QAAnD,EAA6D;AACzD,iBACI,EACI,GAAGP,KADP;AAEIL,YAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAN,CAAYiB,KAAZ,CAAkB,CAAlB,EAAoBF,GAApB,CAAJ,EAA6BT,MAAM,CAACE,OAAP,CAAeG,IAA5C,EAAiD,GAAGN,KAAK,CAACL,KAAN,CAAYiB,KAAZ,CAAkBF,GAAG,GAAC,CAAtB,CAApD;AAFX,WADJ;AAMH,SAPD,MAQK;AACD,cAAIL,IAAI,GAAGL,KAAK,CAACf,KAAN,CAAYuB,IAAZ,CAAiBH,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWY,KAAK,CAACL,KAAN,CAAYe,GAAZ,EAAiBH,QAArD,CAAX;AACAF,UAAAA,IAAI,CAACV,KAAL,GAAaU,IAAI,CAACV,KAAL,CAAWS,MAAX,CAAkBK,MAAM,IAAIA,MAAM,IAAIR,MAAM,CAACE,OAAP,CAAeM,MAArD,CAAb;AACA,cAAIK,OAAO,GAAGd,KAAK,CAACf,KAAN,CAAYuB,IAAZ,CAAiBH,IAAI,IAAIA,IAAI,CAACjB,EAAL,IAAWa,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBO,MAAxD,CAAd;AACAC,UAAAA,OAAO,CAACnB,KAAR,GAAgB,CAAC,GAAGmB,OAAO,CAACnB,KAAZ,EAAmBM,MAAM,CAACE,OAAP,CAAeG,IAAf,CAAoBO,MAAvC,CAAhB;AACA,iBACI;AACI5B,YAAAA,KAAK,EAAEe,KAAK,CAACf,KADjB;AAEIU,YAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAN,CAAYiB,KAAZ,CAAkB,CAAlB,EAAoBF,GAApB,CAAJ,EAA6BT,MAAM,CAACE,OAAP,CAAeG,IAA5C,EAAiD,GAAGN,KAAK,CAACL,KAAN,CAAYiB,KAAZ,CAAkBF,GAAG,GAAC,CAAtB,CAApD;AAFX,WADJ;AAMH;AACJ;;AAED;AAAU,aAAOV,KAAP;AA1Ed;AA4EH,CA7ED;;AA+EA,eAAeD,WAAf","sourcesContent":["import { useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport Tasks from \"../Tasks\";\n\nlet users = [];\nif(users.length == 0)\n{\n    let newUser1 = {};\n    newUser1.id = 0;\n    newUser1.imageUrl = \"https://www.pavilionweb.com/wp-content/uploads/2017/03/man-300x300.png\";\n    newUser1.name = \"Dhruv Patel\";\n    newUser1.designation = \"project head\";\n    newUser1.location = \"Mumbai, India\";\n    newUser1.email = \"dhruv.patel@comapnay.com\";\n    newUser1.phone = \"917878345672\";\n    newUser1.tasks = [0];\n    users.push(newUser1);\n\n    let newUser2 = {};\n    newUser2.id = 1;\n    newUser2.imageUrl = \"assets/john-paul.jpeg\";\n    newUser2.name = \"John Paul\";\n    newUser2.designation = \"project manager\";\n    newUser2.location = \"New York, USA\";\n    newUser2.email = \"john.paul@comapnay.com\";\n    newUser2.phone = \"19998645408\";\n    newUser2.tasks = [1];\n    users.push(newUser2);\n\n    commitUsers(users);\n}\n\nconst rootReducer = (state = {users: [],tasks: []},action) => {\n    switch (action.type) {\n        case \"ADD_USER\" :\n            return (\n                {\n                    ...state,\n                    users: [...state.users,action.payload],\n                }\n            )\n\n        case \"REMOVE_USER\" :\n            return (\n                {\n                    users: state.users.filter(user => user.id != action.payload.id),\n                    tasks: state.tasks.filter(task => task.assignee != action.payload.id),\n                }\n            )\n\n        case \"ADD_TASK\" : {\n            let user = state.users.find(user => user.id == action.payload.task.assignee);\n            user.tasks.push(action.payload.task.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: [...state.tasks,action.payload.task],\n                }\n            )\n        }\n\n        case \"REMOVE_TASK\" : {\n            let task = state.tasks.find(task => task.taskId == action.payload.taskId);\n            let user = state.users.find(user => user.id == task.assignee);\n            user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n            return (\n                {\n                    users: state.users,\n                    tasks: state.tasks.filter(task => task.taskId != action.payload.taskId),\n                }\n            )\n        }\n\n        case \"UPDATE_USER\" : {\n            let ind = state.users.findIndex(user => user.id == action.payload.id)\n            return (\n                {\n                    ...state,\n                    users: [...state.users.slice(0,ind),action.payload.user,...state.users.slice(ind+1)],\n                }\n            )\n        }\n\n        case \"UPDATE_TASK\" : {\n            let ind = state.tasks.findIndex(task=> task.taskID == action.payload.taskId);\n            if(state.task[ind].assignee == action.payload.task.assignee) {\n                return (\n                    {\n                        ...state,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n            else {\n                let user = state.users.find(user => user.id == state.tasks[ind].assignee);\n                user.tasks = user.tasks.filter(taskId => taskId != action.payload.taskId);\n                let newUser = state.users.find(user => user.id == action.payload.task.taskID);\n                newUser.tasks = [...newUser.tasks, action.payload.task.taskID];\n                return (\n                    {\n                        users: state.users,\n                        tasks: [...state.tasks.slice(0,ind),action.payload.task,...state.tasks.slice(ind+1)]\n                    }\n                )\n            }\n        }\n\n        default : return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}