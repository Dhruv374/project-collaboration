[{"/Users/dhruvpatel/Desktop/project-react/src/index.js":"1","/Users/dhruvpatel/Desktop/project-react/src/App.js":"2","/Users/dhruvpatel/Desktop/project-react/src/reportWebVitals.js":"3","/Users/dhruvpatel/Desktop/project-react/src/Navigation.js":"4","/Users/dhruvpatel/Desktop/project-react/src/Team.js":"5","/Users/dhruvpatel/Desktop/project-react/src/Tasks.js":"6"},{"size":550,"mtime":1612603977786,"results":"7","hashOfConfig":"8"},{"size":469,"mtime":1612605065668,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1612546089854,"results":"10","hashOfConfig":"8"},{"size":1054,"mtime":1612613215706,"results":"11","hashOfConfig":"8"},{"size":11213,"mtime":1612866361930,"results":"12","hashOfConfig":"8"},{"size":15760,"mtime":1612865988876,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"14wvx5z",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/dhruvpatel/Desktop/project-react/src/index.js",[],["29","30"],"/Users/dhruvpatel/Desktop/project-react/src/App.js",[],"/Users/dhruvpatel/Desktop/project-react/src/reportWebVitals.js",[],"/Users/dhruvpatel/Desktop/project-react/src/Navigation.js",["31","32","33","34"],"import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport { NavLink } from 'react-router-dom';\n\nfunction Navbutton({route,isActive}) {\n    \n    const handleClick = function () {\n        window.location.href = \"/\"+route;\n    }\n\n    let className = \"navButton \" + route;\n    if(isActive) {\n        className += \" active\";\n    }\n    return (\n        <div className={className} onClick={handleClick}>{route.toUpperCase()}</div>\n    )\n}\n\nfunction Navbar(props) {\n\n    let url = window.location.href.slice(-1);\n    let task = true;\n    if(url === \"m\") {\n        task = false;\n    }\n    return (\n        <div className=\"topnav\">\n            <Navbutton route={`tasks`} isActive={task}/>\n            <Navbutton route={`team`} isActive={!task}/>\n        </div>\n    );\n}\n\nfunction Navigation(props) {\n    return (\n        <header className=\"header\">\n            <Navbar />\n            <div id=\"projectName\">\n                <h1>McDonalds Website Project</h1>\n            </div>\n        </header>\n    );\n}\n\nexport default Navigation;","/Users/dhruvpatel/Desktop/project-react/src/Team.js",["35","36","37","38","39","40"],"/Users/dhruvpatel/Desktop/project-react/src/Tasks.js",["41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"import { faUserInjured } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useCallback, useState } from 'react/cjs/react.development';\n\nlet statusMapping = [\"Not started\" , \"In-progress\" , \"On hold\" , \"Completed\"];\nlet monthMapping = [\"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\", \"Dec\"];\nlet statusColorMapping = [\"yellow\" , \"purple\" , \"red\" , \"chartreuse\"];\nlet mapStatus = {\n    \"Not started\" : 0,\n    \"In-progress\" : 1,\n    \"On hold\" : 2,\n    \"Completed\" : 3,\n}\n\n\nfunction getDateString(date) {\n    let dateString = \" \";\n    dateString+=date.slice(8,10);\n    dateString+=\" \";\n    dateString+=monthMapping[+date.slice(5,7)-1];\n    dateString+=\",\";\n    dateString+=date.slice(0,4);\n    return dateString;\n}\n\nfunction getStageString(stages) {\n    let totalStages = 0;\n    let completedStages = 0;\n    for(let prop in stages)\n    {\n        totalStages++;\n        if(stages[prop])\n        {\n            completedStages++;\n        }\n    }\n    let stagesString = \" \" + completedStages + \"/\" + totalStages;\n    return stagesString;\n}\n\nfunction TaskInfo({task}) {\n    return(\n        <div className=\"taskInfo\">\n            <span className=\"taskStatus\">\n                <i className=\"fa fa-square taskStatusSymbol\" aria-hidden=\"true\" style={{color : statusColorMapping[task.status]}}></i> {statusMapping[task.status]}\n            </span>\n            <span className=\"taskDue\">\n                <i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i> {getDateString(task.dueDate)}\n            </span>\n            <span>\n                <i className=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> {getStageString(task.stages)}\n            </span>\n        </div>\n    );\n}\n\nconst TaskImage = React.memo(function({src}) {\n    return (\n        <div className=\"taskImage\">\n            <img src = {src} height=\"160px\" width=\"252px\"/>\n        </div>\n    );\n})\n\nconst TaskCard = React.memo(function({task,editClick}) {\n\n    function editCallback() {\n        editClick(task);\n    }\n\n    return (\n        <div className=\"card\" onClick={editCallback}>\n            <TaskImage src={task.imageUrl} />\n            <div className=\"taskTitle\">\n                {task.title}\n            </div>\n            <hr className=\"titleLineBreaks\" />\n            <TaskInfo task={task} />\n        </div>\n    )\n});\n\nfunction UserColumn({userTasks,userName,editClickHandle,userId}) {\n\n    const editClick = useCallback((task) => editClickHandle(task),[]);\n\n    return (\n        <section className=\"board-list\">\n            <div className=\"tasksAdd\" onClick={() => editClick({assignee: userId,imageUrl: \"assets/default.png\",status:0})}>\n                <i className=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>\n            </div>\n            <div className=\"list-title\">\n                {userName}\n            </div>\n            {userTasks.map(task => <TaskCard task={task} key={task.taskId} editClick={editClick}/>)}\n        </section>\n    );\n}\n\nfunction StagesDisplay({stages,closeStage}) {\n    let stageArray = [];\n    for(let stage in stages) {\n        stageArray.push(stage);\n    }\n\n    function handleChange(e) {\n        if(e.target.value == \"on\")\n        {\n            stages[e.target.dataset.stagename] = true;\n        }\n        else\n        {\n            stages[e.target.dataset.stagename] = false;\n        }\n    }\n\n    function closeStageCallback(e) {\n        closeStage(e.target.dataset.stagename);\n    }\n\n    return (\n        <ul className=\"stagesList\"> \n            {stageArray.map(function(stage,index){\n                return (<li key={index}><input type=\"checkbox\" defaultChecked={stages[stage]} onChange={handleChange} data-stagename={stage}/>{` ${stage}`}\n                <span className=\"stageCloseButton\" onClick={closeStageCallback} data-stagename={stage}>{\" \\u274c\"}</span> \n                </li>);\n            }   )}\n        </ul>\n    );\n}\n\nfunction TaskImageurl({image,handleImageChange}) {\n\n    const [taskImage,setTaskImage] = useState(image);\n\n    function handleChange(e) {\n        let uploadUrl = e.target.value;\n        uploadUrl = uploadUrl.slice(12);\n        uploadUrl = 'assets/' + uploadUrl;\n        setTaskImage(uploadUrl);\n        handleImageChange(uploadUrl);\n    }\n\n    return (\n        <div className=\"taskImageOverlay\">\n            <label htmlFor=\"task-image-input\">\n                <img src = {taskImage} height=\"160px\" width=\"252px\" />\n            </label>\n            <input onChange={handleChange} type=\"file\" id=\"task-image-input\" accept=\"image/*\" style={{display:'none'}} />\n        </div> \n    )\n}\n\nfunction TaskTitle({title,handleTitleChange}) {\n    const [taskTitle,setTaskTitle] = useState(title);\n\n    function handleChange(e) {\n        setTaskTitle(e.target.value);\n        handleTitleChange(e.target.value);\n    }\n\n    return (\n        <div className=\"taskTitleOverlay\">\n            <label htmlFor=\"taskTitleInput\"><i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Title :- </label>\n            <input value={taskTitle} onChange={handleChange} type=\"text\" id=\"taskTitleInput\" name=\"taskTitleInput\" />  \n        </div>\n    )\n}\n\nfunction TaskAssignee({users,assignee,handleAssigneeChange}) {\n\n    const [taskAssignee,setTaskAssignee] = useState(assignee);\n\n    function handleChange(e) {\n        setTaskAssignee(e.target.value);\n        handleAssigneeChange(e.target.value);\n    }\n\n    return (\n        <div className=\"taskUserOverlay\">\n            <label htmlFor=\"taskUserInput\"><i className=\"fa fa-user-circle-o\" aria-hidden=\"true\"></i> Assigee :- </label>\n            <select id=\"taskUserInput\" value={taskAssignee} onChange={handleChange}>\n                {users.map(function(user) {\n                    return (<option value={user.name} key={user.id}>{user.name}</option>);\n                })}\n            </select>  \n        </div>\n    )\n}\n\nfunction TaskStatus({status,handleStatusChange}) {\n\n    const [taskStatus,setTaskStatus] = useState(status);\n\n    function handleChange(e) {\n        setTaskStatus(e.target.value);\n        handleStatusChange(e.target.value);\n    }\n    return (\n        <div className=\"taskStatusOverlay\">\n            <label htmlFor=\"taskSatusInput\"><i className=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i>\n                {` Status :-`}</label>\n            <select id=\"taskStatusInput\" value={taskStatus} onChange={handleChange}>\n                <option value=\"Not started\">Not started</option>\n                <option value=\"In-progress\">In-progress</option>\n                <option value=\"On hold\">On hold</option>\n                <option value=\"Completed\">Completed</option>\n            </select>\n        </div>\n    );\n\n}\n\nfunction TaskDate({date,handleDateChange}) {\n    const [taskDate,setTaskDate] = useState(date);\n\n    function handleChange(e) {\n        setTaskDate(e.target.value);\n        handleDateChange(e.target.value);\n    }\n\n    return (\n        <div className=\"taskDateOverlay\">\n            <label htmlFor=\"taskDateInput\"><i className=\"fa fa-clock-o\" aria-hidden=\"true\"></i> Due date :- </label>\n            <input value={taskDate} onChange={handleChange} type=\"date\" id=\"taskDateInput\" name=\"taskDateInput\" placeholder=\"dd/mm/yyyy\" />  \n        </div>\n    )\n}\n\n\nfunction TaskOverlay({task,users,handleClose,handleSave,handleDelete}) {\n\n    let selectedIndex = useMemo(() => users.findIndex((user) => user.id == task.assignee),[task]);\n    \n    let taskImage = task.imageUrl || \"assets/default.png\";\n    function handleImageChange(imageUrl) {\n        taskImage = imageUrl;\n    }\n\n    let taskTitle = task.title || \"\";\n    function handleTitleChange(title) {\n        taskTitle = title;\n    }\n\n    let taskAssignee = users[selectedIndex].name;\n    function handleAssigneeChange(assignee) {\n        taskAssignee = assignee;\n    }\n\n    let taskStatus = statusMapping[task.status];\n    function handleStatusChange(status) {\n        taskStatus = status;\n    }\n\n    let taskDate = task.dueDate || \"\";\n    function handleDateChange(date) {\n        taskDate = date;\n    }\n\n    const [taskStages,setTaskstages] = useState(task.stages);\n\n    function deleteStageHandle(stageName) {\n        let newStages = {};\n        for(let stage in taskStages) {\n            newStages[stage] = taskStages[stage];\n        }\n        delete newStages[stageName];\n        setTaskstages(newStages);\n    }\n\n    function addStageHandle() {\n        let stageName = prompt(\"Enter stage name:- \",\"\");\n        if(stageName==\"\" || stageName == null)\n        {\n            return;\n        }\n        let newStages = {};\n        for(let stage in taskStages) {\n            newStages[stage] = taskStages[stage];\n        }\n        newStages[stageName] = false;\n        setTaskstages(newStages);\n    }\n\n    function closeCallback () {\n        handleClose();\n    }\n\n    function saveCallBack() {\n        let currentAssigneeIndex = users.findIndex((user) => user.name == taskAssignee);\n        let newTask = {};\n        if(isNaN(task.taskId)) {\n            newTask.taskId = -1;\n        }\n        else {\n            newTask.taskId = task.taskId;\n            if(selectedIndex != currentAssigneeIndex) {\n                let taskIndex = users[selectedIndex].tasks.findIndex((taskId) => taskId == newTask.taskId);\n                users[selectedIndex].tasks.splice(taskIndex,1);\n                users[currentAssigneeIndex].tasks.push(newTask.taskId);\n            }\n        }\n        newTask.imageUrl = taskImage;\n        newTask.title = taskTitle;\n        newTask.assignee = users[currentAssigneeIndex].id;\n        newTask.status = mapStatus[taskStatus];\n        newTask.stages = {};\n        for(let stage in taskStages) {\n            newTask.stages[stage] = taskStages[stage];\n        }\n        newTask.dueDate = taskDate;\n        handleSave(newTask);\n    }\n\n    function deleteCallBack() {\n        if(isNaN(task.taskId)) {\n            closeCallback();\n        }\n        else {\n            let ind = users[selectedIndex].tasks.findIndex((taskId) => taskId == task.taskId);\n            users[selectedIndex].tasks.splice(ind,1);\n            handleDelete(task.taskId);\n        }\n    }\n\n\n    return (\n        <div className=\"tasksOverlayContainer\">\n            <div className=\"tasksOverlay\">\n                <div className=\"closeButton\" onClick={closeCallback}>\n                X\n                </div>\n\n                <TaskImageurl image={taskImage} handleImageChange={handleImageChange} />\n                <TaskTitle title={taskTitle} handleTitleChange={handleTitleChange} />\n                <TaskAssignee users={users} assignee={taskAssignee} handleAssigneeChange={handleAssigneeChange} />\n                <div className=\"taskStagesOverlay\">\n                    <label><i className=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Stages :- </label>\n                    <StagesDisplay stages={taskStages} closeStage={deleteStageHandle}/>\n                    <div className=\"addStageButton\" onClick={addStageHandle}>\n                        <i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Stage\n                    </div>\n                </div>\n\n                <TaskStatus status={taskStatus} handleStatusChange={handleStatusChange} />\n                <TaskDate date={taskDate} handleDateChange={handleDateChange} />\n                <div className=\"overlayButtons\">\n                <div className=\"saveButton\" onClick={saveCallBack}>\n                    <i className=\"fa fa-check\" aria-hidden=\"true\"></i> SAVE\n                </div>\n                <div className=\"deleteButton\" onClick={deleteCallBack}>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"></i> DELETE CARD\n                </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction TasksContainer({tasks,users}) {\n\n    const [overlay,setOverlay] = useState(null);\n\n    function editClickHandle(task) {\n        setOverlay(task);\n    }\n\n    function handleClose() {\n        setOverlay(null);\n    }\n\n    function handleSave(newTask) {\n        if(newTask.taskId == -1) {\n            newTask.taskId = tasks[tasks.length-1].taskId+1;\n            (users.find((user) => user.id == newTask.assignee)).tasks.push(newTask.taskId);\n            tasks.push(newTask);\n        }\n        else {\n            let ind = tasks.findIndex((task) => task.taskId == newTask.taskId);\n            tasks[ind] = newTask;\n        }\n        taskMap.set(newTask.taskId,newTask);\n        commitUsers(users);\n        commitTasks(tasks);\n        setOverlay(null);\n    }\n    \n    function handleDelete(id) {\n        let ind = tasks.findIndex((task) => task.taskId == id);\n        tasks.splice(ind,1);\n        commitUsers(users);\n        commitTasks(tasks);\n        setOverlay(null);\n    }\n\n    let taskMap = new Map();\n    tasks.forEach(element => {\n        taskMap.set(element.taskId,element);\n    });\n\n    if(overlay == null) {\n        return(\n                <>\n                    <div className=\"board-lists\">\n                        {users.map(function (user) {\n                            let userTasks = [];\n                            user.tasks.forEach(id => userTasks.push(taskMap.get(id)));\n                            return <UserColumn userTasks={userTasks} key={user.id} userName={user.name} editClickHandle={editClickHandle} userId={user.id}/>\n                        })}\n                    </div> \n                </>\n            )\n    }\n\n    else {\n        return(\n            <>\n                <div className=\"board-lists\">\n                    {users.map(function (user) {\n                        let userTasks = [];\n                        user.tasks.forEach(id => userTasks.push(taskMap.get(id)));\n                        return <UserColumn userTasks={userTasks} key={user.id} userName={user.name} editClickHandle={editClickHandle}/>\n                    })}\n                </div> \n                <TaskOverlay task={overlay} users={users} handleClose={handleClose} handleSave={handleSave} handleDelete={handleDelete}/>\n            </>\n        )\n    }\n}\n\n\nfunction Tasks(props) {\n    let users = fetchUsers();\n    let tasks = fetchTasks();\n    return (\n        <section className=\"board\">\n            <TasksContainer users={users} tasks={tasks} />\n        </section>\n    )\n}\n\nfunction fetchTasks() {\n    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    if(tasks.length == 0)\n    {\n        let newTask1 = {};\n        newTask1.taskId = 0;\n        newTask1.imageUrl = \"assets/macd-first-page.jpeg\";\n        newTask1.title = \"Create welcome page of the restaurant\";\n        newTask1.assignee = 0;\n        newTask1.status = 0;\n        newTask1.dueDate = \"2020-12-25\";\n        newTask1.stages = {\n            \"Write HTML document\" : false,\n            \"Add styling to the page using CSS\" : false,\n            \"Add interaction using Javascript\" : false,\n            \"Deploy the page\" : false,\n        };\n        tasks.push(newTask1);\n\n        let newTask2 = {};\n        newTask2.taskId = 1;\n        newTask2.imageUrl = \"assets/default.png\";\n        newTask2.title = \"create customer care utility\";\n        newTask2.assignee = 1;\n        newTask2.status = 0;\n        newTask2.dueDate = \"2020-12-25\";\n        newTask2.stages = {\n            \"Build static layout\" : false,\n            \"Add UI in the page\" : false,\n            \"Create chatbot\" : false,\n            \"Design ML model for chatbot\" : false,\n        };\n        tasks.push(newTask2);\n        commitTasks(tasks);\n    }\n    return tasks;\n}\n\nfunction commitTasks(tasks) {\n    localStorage.setItem('tasks',JSON.stringify(tasks));\n}\n\nfunction fetchUsers() {\n    let users = JSON.parse(localStorage.getItem('users'));\n    return users;\n}\n\nfunction commitUsers(users) {\n    localStorage.setItem('users',JSON.stringify(users));\n}\n\nexport default Tasks;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":16,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"67","line":1,"column":27,"nodeType":"65","messageId":"66","endLine":1,"endColumn":35},{"ruleId":"63","severity":1,"message":"68","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":16},{"ruleId":"63","severity":1,"message":"69","line":3,"column":10,"nodeType":"65","messageId":"66","endLine":3,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":1,"column":15,"nodeType":"65","messageId":"66","endLine":1,"endColumn":24},{"ruleId":"63","severity":1,"message":"68","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":271,"column":23,"nodeType":"72","messageId":"73","endLine":271,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":277,"column":57,"nodeType":"72","messageId":"73","endLine":277,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":285,"column":53,"nodeType":"72","messageId":"73","endLine":285,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":326,"column":21,"nodeType":"72","messageId":"73","endLine":326,"endColumn":23},{"ruleId":"63","severity":1,"message":"74","line":1,"column":10,"nodeType":"65","messageId":"66","endLine":1,"endColumn":23},{"ruleId":"63","severity":1,"message":"68","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":62,"column":13,"nodeType":"77","endLine":62,"endColumn":60},{"ruleId":"78","severity":1,"message":"79","line":87,"column":67,"nodeType":"80","endLine":87,"endColumn":69,"suggestions":"81"},{"ruleId":"70","severity":1,"message":"71","line":109,"column":27,"nodeType":"72","messageId":"73","endLine":109,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":149,"column":17,"nodeType":"77","endLine":149,"endColumn":71},{"ruleId":"70","severity":1,"message":"71","line":235,"column":73,"nodeType":"72","messageId":"73","endLine":235,"endColumn":75},{"ruleId":"78","severity":1,"message":"82","line":235,"column":91,"nodeType":"80","endLine":235,"endColumn":97,"suggestions":"83"},{"ruleId":"70","severity":1,"message":"71","line":275,"column":21,"nodeType":"72","messageId":"73","endLine":275,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":292,"column":72,"nodeType":"72","messageId":"73","endLine":292,"endColumn":74},{"ruleId":"70","severity":1,"message":"84","line":299,"column":30,"nodeType":"72","messageId":"73","endLine":299,"endColumn":32},{"ruleId":"70","severity":1,"message":"71","line":300,"column":89,"nodeType":"72","messageId":"73","endLine":300,"endColumn":91},{"ruleId":"70","severity":1,"message":"71","line":322,"column":79,"nodeType":"72","messageId":"73","endLine":322,"endColumn":81},{"ruleId":"70","severity":1,"message":"71","line":375,"column":27,"nodeType":"72","messageId":"73","endLine":375,"endColumn":29},{"ruleId":"70","severity":1,"message":"71","line":377,"column":43,"nodeType":"72","messageId":"73","endLine":377,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":381,"column":61,"nodeType":"72","messageId":"73","endLine":381,"endColumn":63},{"ruleId":"70","severity":1,"message":"71","line":391,"column":57,"nodeType":"72","messageId":"73","endLine":391,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":446,"column":21,"nodeType":"72","messageId":"73","endLine":446,"endColumn":23},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'NavLink' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'faUserInjured' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'editClickHandle'. Either include it or remove the dependency array. If 'editClickHandle' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["87"],"React Hook useMemo has a missing dependency: 'users'. Either include it or remove the dependency array.",["88"],"Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [editClickHandle]",{"range":"93","text":"94"},"Update the dependencies array to be: [task.assignee, users]",{"range":"95","text":"96"},[2543,2545],"[editClickHandle]",[7431,7437],"[task.assignee, users]"]